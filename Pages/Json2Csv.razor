@page "/json2csv"

@using System.Text.Json

@inject IJSRuntime JSRuntime

<PageTitle>Json2Csv</PageTitle>

<div class="container">
    <div class="head">
        <h1>Json2Csv</h1>
        <h3>This component demonstrates converting JSON to CSV.</h3>
    </div>
    <div class="body">
        <div class="input-container">
            <div class="d-flex align-items-center highlight-toolbar ms-auto ps-3 pe-2 py-1">
                <InputFile class="form-control btn btn-dark me-2" OnChange="HandleJsonFileUpload" accept=".json" />
                <button type="button" class="btn @(isJsonCopied ? "btn-secondary" : "btn-outline-secondary")"
                    @onclick="() => CopyText(jsonText, 0)"><svg xmlns="http://www.w3.org/2000/svg" width="24"
                        height="24" viewBox="0 0 28 28">
                        <path fill="#cccccc"
                            d="M9.708 5.5H7.75c-.69 0-1.25.56-1.25 1.25v16.5c0 .69.56 1.25 1.25 1.25h12.5c.69 0 1.25-.56 1.25-1.25V6.75c0-.69-.56-1.25-1.25-1.25h-1.958A2.5 2.5 0 0 1 16 7h-4a2.5 2.5 0 0 1-2.292-1.5M18.45 4h1.8A2.75 2.75 0 0 1 23 6.75v16.5A2.75 2.75 0 0 1 20.25 26H7.75A2.75 2.75 0 0 1 5 23.25V6.75A2.75 2.75 0 0 1 7.75 4h1.8A2.5 2.5 0 0 1 12 2h4a2.5 2.5 0 0 1 2.45 2M11 4.5a1 1 0 0 0 1 1h4a1 1 0 1 0 0-2h-4a1 1 0 0 0-1 1" />
                    </svg></button>
                <button type="button" class="btn btn-outline-danger" id="clear-csv-btn" @onclick="ClearJson">X</button>
            </div>
            <textarea rows="0" name="csvtext" id="json" @oninput="HandleJsonInputChange"
                placeholder="Enter JSON text here" @bind="@jsonText"></textarea>
        </div>
        <div class="button-container">
            <div class="btn-group" role="group" aria-label="Basic outlined example">
                <button type="button" class="btn btn-outline-primary" id="convert-btn" @onclick="Convert">Convert to
                    JSON</button>
                <button type="button" class="btn btn-outline-primary" id="clear-btn" @onclick="ClearAll">Clear
                    All</button>
            </div>
        </div>
        <div class="output-container">
            <div class="d-flex align-items-center highlight-toolbar ms-auto ps-3 pe-2 py-1">
                <button class="btn btn-primary" @onclick="DownloadCsv">Download CSV</button>
                <button type="button" class="btn @(isCsvCopied ? "btn-secondary" : "btn-outline-secondary")"
                    @onclick="() => CopyText(csvText, 1)"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24"
                        viewBox="0 0 28 28">
                        <path fill="#cccccc"
                            d="M9.708 5.5H7.75c-.69 0-1.25.56-1.25 1.25v16.5c0 .69.56 1.25 1.25 1.25h12.5c.69 0 1.25-.56 1.25-1.25V6.75c0-.69-.56-1.25-1.25-1.25h-1.958A2.5 2.5 0 0 1 16 7h-4a2.5 2.5 0 0 1-2.292-1.5M18.45 4h1.8A2.75 2.75 0 0 1 23 6.75v16.5A2.75 2.75 0 0 1 20.25 26H7.75A2.75 2.75 0 0 1 5 23.25V6.75A2.75 2.75 0 0 1 7.75 4h1.8A2.5 2.5 0 0 1 12 2h4a2.5 2.5 0 0 1 2.45 2M11 4.5a1 1 0 0 0 1 1h4a1 1 0 1 0 0-2h-4a1 1 0 0 0-1 1" />
                    </svg></button>
                <button type="button" class="btn btn-outline-danger" id="clear-json-btn" @onclick="ClearCsv">X</button>
            </div>
            <pre>@csvText</pre>
        </div>
    </div>
    <div class="foot">
    </div>
</div>

@code {
    private string jsonText = string.Empty;
    private string csvText = "CSV will be here";
    private bool isCsvCopied = false;
    private bool isJsonCopied = false;

    private async Task HandleJsonFileUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file != null && file.ContentType == "application/json" && file.Size < 1048576) // 1 MB limit
        {
            using (var stream = file.OpenReadStream())
            using (var reader = new StreamReader(stream))
            {
                var jsonData = await reader.ReadToEndAsync();

                try
                {
                    var records = JsonSerializer.Deserialize<List<Dictionary<string, object>>>(jsonData);

                    if (records != null && records.Count > 0)
                    {
                        using (var csvWriter = new StringWriter())
                        using (var csv = new CsvWriter(csvWriter, CultureInfo.InvariantCulture))
                        {
                            foreach (var key in records[0].Keys)
                            {
                                csv.WriteField(key);
                            }
                            csv.NextRecord();

                            foreach (var record in records)
                            {
                                foreach (var value in record.Values)
                                {
                                    csv.WriteField(value);
                                }
                                csv.NextRecord();
                            }

                            csv.Flush();
                            csvText = csvWriter.ToString();
                        }
                    }
                    else
                    {
                        csvText = "JSON data is empty or invalid!";
                    }
                }
                catch (JsonException ex)
                {
                    csvText = $"JSON deserialization error: {ex.Message}";
                }
            }
        }
        else
        {
            csvText = "Please upload a valid JSON file (max 1 MB).";
        }
    }

    private async Task DownloadCsv()
    {
        if (!string.IsNullOrEmpty(csvText))
        {
            await JSRuntime.InvokeVoidAsync("downloadFile", "data.csv", csvText);
        }
        else
        {
            Console.WriteLine("CSV verisi boÅŸ.");
        }
    }

    private async Task Convert()
    {
        await Task.Run(() =>
        {
            var json = jsonText;

            if (string.IsNullOrWhiteSpace(json))
            {
                csvText = "JSON text is empty!";
                return;
            }

            var jsonList = JsonSerializer.Deserialize<List<Dictionary<string, string>>>(json);
            if (jsonList == null)
            {
                csvText = "JSON text is not valid!";
                return;
            }

            var headers = jsonList.First().Keys.ToArray();
            var csv = string.Join(",", headers) + Environment.NewLine;
            foreach (var jsonItem in jsonList)
            {
                csv += string.Join(",", jsonItem.Values) + Environment.NewLine;
            }

            csvText = csv;
        });
    }

    private void ClearAll()
    {
        jsonText = string.Empty;
        csvText = "CSV will be here";
        isCsvCopied = false;
        isJsonCopied = false;
    }

    private void ClearCsv()
    {
        csvText = "CSV will be here";
        isCsvCopied = false;
    }

    private void ClearJson()
    {
        jsonText = string.Empty;
        isJsonCopied = false;
    }

    private async Task CopyText(string text, int elementId)
    {
        try
        {
            if (!string.IsNullOrWhiteSpace(text))
            {
                await JSRuntime.InvokeVoidAsync("navigator.clipboard.writeText", text);

                if (elementId == 0) { isJsonCopied = true; }
                else { isCsvCopied = true; }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Hata: {ex.Message}");
        }
    }

    private void HandleJsonInputChange(ChangeEventArgs e)
    {
        isJsonCopied = false;
    }
}

<style>
    .container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
    }

    .head {
        text-align: center;
        margin-top: 2rem;
    }

    .body {
        width: 100%;
        display: flex;
        flex-direction: column;
    }

    .input-container {
        width: 100%;
        display: flex;
        flex-direction: column;
        margin-bottom: 8px;
        box-sizing: border-box;
        border: 2px solid #ccc;
        border-radius: 4px;
        background-color: #f8f8f8;
    }

    .output-container {
        width: 100%;
        display: flex;
        flex-direction: column;
        margin-top: 8px;
        box-sizing: border-box;
        border: 2px solid #ccc;
        border-radius: 4px;
        background-color: #f8f8f8;
    }

    .button-container {
        width: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
        text-align: center;

        #clear-btn {
            margin-left: 4px;
        }
    }

    .foot {
        width: 100%;
        display: flex;
        margin-top: 2rem;
    }

    textarea {
        width: 100%;
        height: 225px;
        padding: 12px 20px;
        box-sizing: border-box;
        border: 1px solid #ccc;
        background-color: #f8f8f8;
        resize: none;
    }

    pre {
        white-space: pre-wrap;
        text-align: left;
        width: 100%;
        height: 225px;
        padding: 12px 20px;
        margin-bottom: 0;
        box-sizing: border-box;
        border: 1px solid #ccc;
        background-color: #f8f8f8;
        resize: none;
    }
</style>